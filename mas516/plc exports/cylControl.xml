<?xml version="1.0" encoding="UTF-8"?>
<project>
  <!--(*
 *
 * File: digitalClone_workingCopy.xml
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "digitalClone_workingCopy/Verification comparisons /CylController"
 *
 * Model name                      : digitalClone_workingCopy
 * Model version                   : 2.68
 * Model creator                   : endre
 * Model last modified by          : Tim
 * Model last modified on          : Wed Nov 16 20:55:35 2022
 * Model sample time               : 0.001s
 * Subsystem name                  : digitalClone_workingCopy/Verification comparisons /CylController
 * Subsystem sample time           : 0.001s
 * Simulink PLC Coder version      : 3.7 (R2022b) 13-May-2022
 * ST code generated on            : Thu Nov 17 00:28:45 2022
 *
 * Target IDE selection            : Beckhoff TwinCAT 3
 * Test Bench included             : No
 *
 *)
-->
  <fileHeader companyName="The Mathworks, Inc." companyURL="www.mathworks.com" contentDescription="" creationDateTime="2022-11-17T00:28:44" productName="Simulink PLC Coder" productRelease="(R2022b)" productVersion="3.7"/>
  <contentHeader name="digitalClone_workingCopy">
    <coordinateInfo>
      <fbd>
        <scaling x="0" y="0"/>
      </fbd>
      <ld>
        <scaling x="0" y="0"/>
      </ld>
      <sfc>
        <scaling x="0" y="0"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="CylController" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ssMethodType">
              <type>
                <SINT/>
              </type>
            </variable>
            <variable name="EnablePFC">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PosRefm">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="PosFbm">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="propGain">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="vRefms">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="integralGain">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="EnableIntegral">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="maxPosError">
              <type>
                <LREAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="xCylErrormm">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="SetValue">
              <type>
                <LREAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="rtb_Reset">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="rtb_u_FB">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="rtb_Saturation1">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="c_DiscreteTimeIntegrator_DS">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="Delay_DSTATE">
              <type>
                <array>
                  <dimension lower="0" upper="1"/>
                  <baseType>
                    <LREAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"><![CDATA[

CASE ssMethodType OF
    SS_INITIALIZE: 
        (* SystemInitialize for Atomic SubSystem: '<Root>/CylController' *)
        (* InitializeConditions for Delay: '<S1>/Delay' *)
        Delay_DSTATE[0] := 0.0;
        Delay_DSTATE[1] := 0.0;
        (* SystemInitialize for Atomic SubSystem: '<S1>/FB_ClosedLoopControl' *)
        (* InitializeConditions for DiscreteIntegrator: '<S2>/Discrete-Time Integrator' *)
        c_DiscreteTimeIntegrator_DS := 0.0;
        (* End of SystemInitialize for SubSystem: '<S1>/FB_ClosedLoopControl' *)
        (* End of SystemInitialize for SubSystem: '<Root>/CylController' *)
    SS_STEP: 
        (* Outputs for Atomic SubSystem: '<Root>/CylController' *)
        (* Outputs for Atomic SubSystem: '<S1>/FB_ResetIntegralController' *)
        (* MATLAB Function: '<S3>/ResetIntegralController' *)
        (* MATLAB Function 'CylController/FB_ResetIntegralController/ResetIntegralController': '<S4>:1' *)
        (* '<S4>:1:3' if abs(vRef) > 0 || abs(exCyl) > exCylMax *)

        IF ABS(vRefms) > 0.0 THEN 
            ;
            ;
        ELSIF ABS(Delay_DSTATE[0]) > (0.001 * maxPosError) THEN 
            ;
            ;
        ELSE 
            (* Outputs for Atomic SubSystem: '<S1>/FB_ClosedLoopControl' *)
            (* DiscreteIntegrator: '<S2>/Discrete-Time Integrator' *)
            (* '<S4>:1:5' else *)
            (* '<S4>:1:6' Reset = 1; *)
            c_DiscreteTimeIntegrator_DS := 0.0;
            (* End of Outputs for SubSystem: '<S1>/FB_ClosedLoopControl' *)
        END_IF;

        (* End of MATLAB Function: '<S3>/ResetIntegralController' *)
        (* End of Outputs for SubSystem: '<S1>/FB_ResetIntegralController' *)
        

        (* Outputs for Atomic SubSystem: '<S1>/FB_ClosedLoopControl' *)
        (* DiscreteIntegrator: '<S2>/Discrete-Time Integrator' *)

        IF c_DiscreteTimeIntegrator_DS >= 1.0 THEN 
            c_DiscreteTimeIntegrator_DS := 1.0;
        ELSIF c_DiscreteTimeIntegrator_DS <= -1.0 THEN 
            c_DiscreteTimeIntegrator_DS := -1.0;
        END_IF;

        (* Sum: '<S2>/Sum1' *)
        rtb_Reset := PosRefm - PosFbm;
        (* Switch: '<S2>/Switch' incorporates:
         *  Constant: '<S2>/Constant'
         *  DiscreteIntegrator: '<S2>/Discrete-Time Integrator' *)

        IF EnableIntegral THEN 
            rtb_u_FB := c_DiscreteTimeIntegrator_DS;
        ELSE 
            rtb_u_FB := 0.0;
        END_IF;

        (* End of Switch: '<S2>/Switch' *)
        

        (* Sum: '<S2>/Sum5' incorporates:
         *  Product: '<S2>/Product' *)
        rtb_u_FB := (propGain * rtb_Reset) + rtb_u_FB;
        (* Saturate: '<S2>/Saturation1' *)

        IF rtb_u_FB > 1.0 THEN 
            rtb_Saturation1 := 1.0;
        ELSIF rtb_u_FB >= -1.0 THEN 
            rtb_Saturation1 := rtb_u_FB;
        ELSE 
            rtb_Saturation1 := -1.0;
        END_IF;

        (* End of Saturate: '<S2>/Saturation1' *)
        

        (* Switch: '<S2>/Switch1' *)

        IF EnablePFC THEN 
            (* Outport: '<Root>/Set Value' *)
            SetValue := rtb_Saturation1;
        ELSE 
            (* Outport: '<Root>/Set Value' incorporates:
             *  Constant: '<S2>/Constant1' *)
            SetValue := 0.0;
        END_IF;

        (* End of Switch: '<S2>/Switch1' *)
        

        (* Update for DiscreteIntegrator: '<S2>/Discrete-Time Integrator' incorporates:
         *  Product: '<S2>/Divide'
         *  Product: '<S2>/Product2'
         *  Sum: '<S2>/Sum2'
         *  Sum: '<S2>/Sum3' *)
        c_DiscreteTimeIntegrator_DS := (((((rtb_Saturation1 - rtb_u_FB) / propGain) + rtb_Reset) * integralGain) * 0.001) + c_DiscreteTimeIntegrator_DS;

        IF c_DiscreteTimeIntegrator_DS >= 1.0 THEN 
            c_DiscreteTimeIntegrator_DS := 1.0;
        ELSIF c_DiscreteTimeIntegrator_DS <= -1.0 THEN 
            c_DiscreteTimeIntegrator_DS := -1.0;
        END_IF;

        (* End of Update for DiscreteIntegrator: '<S2>/Discrete-Time Integrator' *)
        (* End of Outputs for SubSystem: '<S1>/FB_ClosedLoopControl' *)
        

        (* Update for Delay: '<S1>/Delay' *)
        Delay_DSTATE[0] := Delay_DSTATE[1];
        Delay_DSTATE[1] := rtb_Reset;
        (* Outport: '<Root>/xCylError [mm]' incorporates:
         *  Gain: '<S1>/Gain' *)
        xCylErrormm := 1000.0 * rtb_Reset;
        (* End of Outputs for SubSystem: '<Root>/CylController' *)
END_CASE;


]]></xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Configuration">
        <resource name="digitalClone_workingCopy_res">
          <globalVars constant="true">
            <variable name="SS_INITIALIZE">
              <type>
                <SINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="SS_STEP">
              <type>
                <SINT/>
              </type>
              <initialValue>
                <simpleValue value="1"/>
              </initialValue>
            </variable>
          </globalVars>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
